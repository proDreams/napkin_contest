import asyncio
import time
from aiogram import Bot, types
from aiogram.types import (
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ChatMemberMember,
    ChatMemberLeft,
    ChatMemberUpdated,
)
import os
import random
from PIL import Image, ImageDraw, ImageFont
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
def generate_captcha():
    num1 = random.randint(1, 9)
    num2 = random.randint(1, 9)
    result = num1 + num2

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ø—á–∏
    img = Image.new("RGB", (400, 160), color=(255, 255, 255))
    d = ImageDraw.Draw(img)

    font = ImageFont.load_default(90)
    d.text((35, 25), f"{num1} + {num2} = ?", font=font, fill=(0, 0, 0))

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_dir = "captcha_images"
    os.makedirs(img_dir, exist_ok=True)
    img_path = os.path.join(img_dir, f"captcha_{num1}_{num2}.png")
    img.save(img_path)

    logger.info(
        f"–ö–∞–ø—Ç—á–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {num1} + {num2} = {result}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {img_path}"
    )

    return img_path, result


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_captcha(bot: Bot, chat_id: int, user_id: int, first_name: str):
    img_path, result = generate_captcha()
    users_data[user_id] = {
        "result": result,
        "attempts": 0,
        "start_time": time.time(),
        "captcha_message_id": None,
        "first_name": first_name,  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ first_name
    }

    photo = FSInputFile(img_path)
    caption = (
        f"{first_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n\n–†–µ—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —ç—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, "
        f"—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç.\n\n–ù–∞ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–±–µ –¥–∞–µ—Ç—Å—è "
        f"1 –º–∏–Ω—É—Ç–∞ –∏ 3 –ø–æ–ø—ã—Ç–∫–∏"
    )
    sent_message = await bot.send_photo(chat_id, photo, caption=caption)
    users_data[user_id]["captcha_message_id"] = sent_message.message_id
    logger.info(f"–ö–∞–ø—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {user_id} –≤ —á–∞—Ç {chat_id}")
    asyncio.create_task(check_captcha_timeouts(bot, chat_id, user_id))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–∞–ø—á—É
async def check_captcha_timeouts(bot: Bot, chat_id: int, user_id: int):
    while True:
        current_time = time.time()
        data = users_data.get(user_id)
        if data:
            elapsed_time = current_time - data["start_time"]
            remaining_time = 60 - elapsed_time
            if elapsed_time > 60:
                try:
                    await bot.delete_message(chat_id, data["captcha_message_id"])
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π: {e}")

                if "warning_message_id" in data:
                    try:
                        await bot.delete_message(chat_id, data["warning_message_id"])
                    except Exception as e:
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
                        )

                try:
                    await bot.ban_chat_member(chat_id, user_id)
                    first_name = users_data[user_id]["first_name"]
                    await bot.send_message(
                        chat_id,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ "
                        "–∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ø—á–∏.\n\n –ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, –≤–µ—Ä–Ω–µ—Ç—Å—è?",
                    )
                    users_data.pop(user_id, None)
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ø—á–∏"
                    )
                    await bot.unban_chat_member(
                        chat_id, user_id
                    )  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–Ω–∞
                except Exception as e:
                    if "can't remove chat owner" in str(e):
                        if "warning_message_id" in data:
                            try:
                                await bot.delete_message(
                                    chat_id, data["warning_message_id"]
                                )
                            except Exception as e:
                                logger.warning(
                                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
                                )

                        keyboard = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="ü™Ñ –í–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞",
                                        callback_data="admin_warning",
                                    )
                                ]
                            ]
                        )
                        sent_message = await bot.send_message(
                            chat_id,
                            "–ö–æ—Ç, –Ω—É –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∞",
                            reply_markup=keyboard,
                        )
                        users_data[user_id][
                            "warning_message_id"
                        ] = sent_message.message_id
                        logger.info(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}"
                        )
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                logger.info(
                    f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {int(remaining_time)} —Å–µ–∫—É–Ω–¥"
                )
        await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–ø—á—É
async def check_user_captcha(
    bot: Bot, chat_id: int, user_id: int, text: str, message: types.Message
):
    if user_id not in users_data:
        logger.warning(f"User {user_id} is not in user_data")
        return

    elapsed_time = time.time() - users_data[user_id]["start_time"]
    if elapsed_time > 60:  # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ
        await bot.delete_message(chat_id, message.message_id)
        await bot.delete_message(chat_id, users_data[user_id]["captcha_message_id"])
        await bot.send_message(
            chat_id, "–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        users_data.pop(user_id, None)
        return
    # –ï—Å–ª–∏ text —Ä–∞–≤–µ–Ω None, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é
    if text is None:
        return
    correct_result = users_data[user_id]["result"]
    if (
        not text.isdigit() or int(text) != correct_result
    ):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
        await bot.delete_message(chat_id, message.message_id)
        users_data[user_id]["attempts"] += 1
        remaining_attempts = 3 - users_data[user_id]["attempts"]
        remaining_time = 60 - elapsed_time

        if users_data[user_id]["attempts"] >= 3:
            try:
                await bot.ban_chat_member(
                    chat_id, user_id
                )  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –±–∞–Ω–∞
                first_name = users_data[user_id]["first_name"]
                await bot.send_message(
                    chat_id, f"{first_name} –Ω–µ –ø—Ä–æ—à–µ–ª(–∞) –ø—Ä–æ–≤–µ—Ä–∫—É. –û–Ω–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è?"
                )
                users_data.pop(user_id, None)
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
                )
                await bot.unban_chat_member(
                    chat_id, user_id
                )  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –±–∞–Ω–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å
            except Exception as e:
                if "can't remove chat owner" in str(e):
                    if "warning_message_id" in users_data[user_id]:
                        await bot.delete_message(
                            chat_id, users_data[user_id]["warning_message_id"]
                        )
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="ü™Ñ –í–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞",
                                    callback_data="admin_warning",
                                )
                            ]
                        ]
                    )
                    sent_message = await bot.send_message(
                        chat_id, "–ö–æ—Ç, –Ω—É –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∞", reply_markup=keyboard
                    )
                    users_data[user_id]["warning_message_id"] = sent_message.message_id
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}"
                    )
        else:
            if "warning_message_id" in users_data[user_id]:
                await bot.delete_message(
                    chat_id, users_data[user_id]["warning_message_id"]
                )
                users_data[user_id].pop(
                    "warning_message_id", None
                )  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

            warning_message = await bot.send_message(
                chat_id,
                f"–û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ. "
                f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫.\n\n"
                f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {int(remaining_time)} —Å–µ–∫—É–Ω–¥",
            )
            users_data[user_id]["warning_message_id"] = warning_message.message_id
        return

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    await bot.delete_message(chat_id, message.message_id)
    await bot.delete_message(chat_id, users_data[user_id]["captcha_message_id"])
    if "warning_message_id" in users_data[user_id]:
        await bot.delete_message(chat_id, users_data[user_id]["warning_message_id"])

    first_name = users_data[user_id]["first_name"]
    users_data.pop(user_id, None)
    from botlogic.views import join_message

    await join_message(bot, chat_id, user_id, first_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")


async def handle_message(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text

    if user_id in users_data:
        await check_user_captcha(message.bot, chat_id, user_id, text, message)


async def test_captcha(message: types.Message, bot):
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ—Ç–ª–∞–¥–∫—É –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —É—á–µ—Ç–æ–∫
    new_member = ChatMemberMember(
        status="member", user=message.from_user, until_date=None, is_member=True
    )
    old_member = ChatMemberLeft(status="left", user=message.from_user, until_date=None)
    event = ChatMemberUpdated(
        chat=message.chat,
        from_user=message.from_user,
        date=message.date,
        old_chat_member=old_member,
        new_chat_member=new_member,
    )

    from botlogic.handlers.events import on_user_join

    await on_user_join(event, bot)


async def delete_admin_warning_callback(call: CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if user_id in users_data:
        data = users_data[user_id]

        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ù–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /test_captcha
        # –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç, –∞ –∏–≥—Ä–∞—Ç—å—Å—è —Å message_id –≤–ø–∞–¥–ª—É

        if "captcha_message_id" in data:
            try:
                await call.bot.delete_message(chat_id, data["captcha_message_id"])
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π: {e}")

        if "warning_message_id" in data:
            try:
                await call.bot.delete_message(chat_id, data["warning_message_id"])
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        if "test_captcha_message_id" in data:
            try:
                await call.bot.delete_message(chat_id, data["test_captcha_message_id"])
            except Exception as e:
                logger.warning(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}"
                )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–æ–π
        try:
            await call.bot.delete_message(chat_id, call.message.message_id)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–æ–π: {e}")

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data.pop(user_id, None)

        await call.answer("–°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
