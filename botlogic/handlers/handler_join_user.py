# -*- coding: utf-8 -*-


# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π.

import asyncio

from datetime import datetime

import random

from aiogram.types import ChatMemberUpdated, BufferedInputFile, Message

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from botlogic.data_base.requests import MyRequests
from botlogic.utils.create_picture import generate_image
from botlogic.utils.check_timeout import check_captcha_timeout
from botlogic.settings import bot


user_timers = {}


class States(StatesGroup):
    get_answer = State()


# –ö–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É".

async def on_user_join(event: ChatMemberUpdated, state: FSMContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ-–∫–∞–ø—á–∏,
    –∑–∞–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 3 –º–∏–Ω—É—Ç—ã.
    """

    num_0 = random.randint(0, 9)
    num_1 = random.randint(0, 9)
    result = num_1 + num_0
    path = generate_image(num_0, num_1)

    await event.answer_photo(
        photo=BufferedInputFile(open(path, "rb").read(), "picture_of_capcha"),
        caption=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, "
        f'<a href="tg://user?id={event.new_chat_member.user.id}"><i>{event.new_chat_member.user.full_name}</i></a> üëãüèª\n\n'
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ —Ç—ã –Ω–µ —Å–ø–∞–º–µ—Ä, "
        "–æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–¥–∞—á—É –≤ —Ç–µ—á–µ–Ω–∏–∏ <b>3-—Ö</b> –º–∏–Ω—É—Ç:\n"
        "<i>–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?</i>",
    )
    
    await MyRequests.add_new_user(
        user_id=event.new_chat_member.user.id,
        check_captcha="‚ùå",
        time=f"{datetime.now()}",
        result=result,
    )

    user_timers[event.new_chat_member.user.id] = asyncio.create_task(
        check_captcha_timeout(event.new_chat_member.user.id, bot, event)
    )
    await state.set_state(States.get_answer)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
async def get_new_messages(message: Message, state: FSMContext) -> None:
    """–í–∑—è—Ç–∏–µ id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –µ–≥–æ —Å id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è,
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """

    user_id = message.from_user.id
    print(user_id)
    info_about_new_user = await MyRequests.get_user()
    print(info_about_new_user.user_id)
    if user_id == info_about_new_user.user_id:
        if message.text == str(info_about_new_user.result) and not None:
            await message.answer(
                text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É, <i>{message.from_user.full_name}</i>!\n\n"
                f"–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è: —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏ –æ —Å–≤–æ—ë–º –ø—É—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏."
            )
            await MyRequests.clear_table()

            user_timers[user_id].cancel()
            del user_timers[user_id]

            await state.clear()
        else:
            if info_about_new_user.count_attempts >= 1:
                count_attempts = info_about_new_user.count_attempts - 1

                await message.answer(
                    text=f"<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üò¢\n</i>"
                    f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —É —Ç–µ–±—è –µ—â–µ {count_attempts} –ø–æ–ø—ã—Ç–∫–∏!\n"
                )

                await MyRequests.set_item("count_attempts", count_attempts)

                await state.set_state(States.get_answer)
            else:
                await bot.ban_chat_member(chat_id=message.chat.id, user_id=user_id)

                await MyRequests.clear_table()

                user_timers[user_id].cancel()
                del user_timers[user_id]

                await state.clear()
    else:
        await state.set_state(States.get_answer)
